generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())       // 사용자 고유 ID
  email        String        @unique                    // 이메일 주소 (필수)
  name         String        @db.VarChar(100)           // 사용자 이름
  createdAt    DateTime      @default(now())            // 생성일시
  updatedAt    DateTime      @updatedAt                 // 수정일시
  isOwner      Boolean       @default(false)            // 블로그 소유자 여부
  comments     Comment[]                                // 작성한 댓글들
  commentLikes CommentLike[]                            // 댓글 좋아요들
  postLikes    PostLike[]                               // 포스트 좋아요들

  @@index([email])
  @@index([isOwner])
  @@index([createdAt])
  @@map("users")
}

model Post {
  id            Int           @id @default(autoincrement()) // 포스트 고유 ID
  thumbnail     String?       @db.VarChar(500)             // 썸네일 이미지 URL
  categoryId    Int?                                       // 카테고리 ID (외래키)
  title         String        @db.VarChar(200)             // 포스트 제목
  content       String        @db.Text                     // 포스트 내용
  likesCount    Int           @default(0)                  // 좋아요 수 (캐시 필드)
  views         Int           @default(0)                  // 조회수
  createdAt     DateTime      @default(now())              // 생성일시
  updatedAt     DateTime      @updatedAt                   // 수정일시
  slug          String        @unique @db.VarChar(255)     // SEO 친화적 URL
  choseongTitle String        @db.VarChar(200)             // 초성 제목 (한국어 검색용)
  isPrivate     Boolean       @default(false)              // 비공개 여부
  comments      Comment[]                                  // 댓글들
  postLikes     PostLike[]                                 // 좋아요들
  category      Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull) // 카테고리
  tags          Tag[]                                      // 태그들

  @@index([createdAt, categoryId])
  @@index([slug])
  @@index([choseongTitle])
  @@index([views])
  @@index([likesCount])
  @@map("posts")
}

model PostLike {
  id        Int           @id @default(autoincrement())   // 좋아요 고유 ID
  userId    String                                        // 사용자 ID (로그인 필수)
  postId    Int                                           // 포스트 ID
  createdAt DateTime      @default(now())                 // 좋아요 생성일시
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade) // 포스트
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade) // 사용자

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
  @@map("post_likes")
}

model Comment {
  id              Int           @id @default(autoincrement()) // 댓글 고유 ID
  content         String        @db.Text                     // 댓글 내용
  likesCount      Int           @default(0)                  // 좋아요 수 (캐시 필드)
  createdAt       DateTime      @default(now())              // 생성일시
  updatedAt       DateTime      @updatedAt                   // 수정일시
  userId          String                                     // 사용자 ID (로그인 필수)
  postId          Int                                        // 포스트 ID
  parentCommentId Int?                                       // 부모 댓글 ID (대댓글인 경우)
  isDeleted       Boolean       @default(false)              // 삭제 여부 (소프트 삭제)
  isEdited        Boolean       @default(false)              // 수정 여부
  depth           Int           @default(0)                  // 댓글 깊이 (0: 댓글, 1: 대댓글, ...)
  parentComment   Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: SetNull) // 부모 댓글
  replies         Comment[]     @relation("CommentReplies")  // 대댓글들
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)     // 포스트
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)     // 사용자
  commentLikes    CommentLike[]                              // 댓글 좋아요들

  @@index([postId, createdAt])
  @@index([userId])
  @@index([parentCommentId])
  @@index([isDeleted])
  @@index([depth])
  @@index([postId, parentCommentId])
  @@index([likesCount])
  @@index([postId, isDeleted, createdAt])
  @@index([parentCommentId, depth, createdAt])
  @@map("comments")
}

model CommentLike {
  id        Int           @id @default(autoincrement())   // 댓글 좋아요 고유 ID
  userId    String                                        // 사용자 ID (로그인 필수)
  commentId Int                                           // 댓글 ID
  createdAt DateTime      @default(now())                 // 좋아요 생성일시
  comment   Comment       @relation(fields: [commentId], references: [id], onDelete: Cascade) // 댓글
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)   // 사용자

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@index([createdAt])
  @@map("comment_likes")
}

model Category {
  id          Int           @id @default(autoincrement())   // 카테고리 고유 ID
  name        String        @unique @db.VarChar(50)         // 카테고리 이름
  slug        String        @unique @db.VarChar(100)        // SEO 친화적 URL
  createdAt   DateTime      @default(now())                 // 생성일시
  posts       Post[]                                        // 이 카테고리의 포스트들
  projects    Project[]                                     // 이 카테고리의 프로젝트들

  @@index([slug])
  @@map("categories")
}

model Tag {
  id        Int           @id @default(autoincrement())   // 태그 고유 ID
  name      String        @unique @db.VarChar(50)         // 태그 이름
  slug      String        @unique @db.VarChar(100)        // SEO 친화적 URL
  createdAt DateTime      @default(now())                 // 생성일시
  posts     Post[]                                        // 이 태그가 붙은 포스트들
  projects  Project[]                                     // 이 태그가 붙은 프로젝트들

  @@index([slug])
  @@map("tags")
}

enum ProjectStatus {
  PLANNING     // 기획 중
  IN_PROGRESS  // 진행 중
  COMPLETED    // 완료
  PAUSED       // 일시 중단
  ARCHIVED     // 보관됨
}

model Project {
  id          Int            @id @default(autoincrement())  // 프로젝트 고유 ID
  title       String         @db.VarChar(200)               // 프로젝트 제목
  slug        String         @unique @db.VarChar(255)       // SEO 친화적 URL
  description String         @db.Text                       // 프로젝트 설명
  content     String         @db.Text                       // 프로젝트 상세 내용
  images      String[]                                      // 프로젝트 이미지 URLs
  summary     String[]                                      // 프로젝트 요약 포인트들
  status      ProjectStatus  @default(COMPLETED)            // 프로젝트 상태
  categoryId  Int?                                          // 카테고리 ID
  links       ProjectLink[]                                 // 프로젝트 관련 링크들
  startDate   DateTime                                      // 프로젝트 시작일
  endDate     DateTime?                                     // 프로젝트 종료일 (진행중인 경우 null)
  isPersonal  Boolean        @default(true)                 // 개인 프로젝트 여부
  isActive    Boolean        @default(true)                 // 활성 상태 (포트폴리오 노출 여부)
  priority    Int            @default(0)                    // 우선순위 (높을수록 먼저 표시)
  createdAt   DateTime       @default(now())                // 생성일시
  updatedAt   DateTime       @updatedAt                     // 수정일시
  category    Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull) // 카테고리
  tags        Tag[]                                         // 태그들
  techStack   TechStack[]                                   // 기술 스택들

  @@index([slug])
  @@index([isActive, priority])
  @@index([status])
  @@index([categoryId])
  @@index([startDate])
  @@index([createdAt])
  @@map("projects")
}

model TechStack {
  id          Int       @id @default(autoincrement())     // 기술 스택 고유 ID
  name        String    @unique @db.VarChar(50)           // 기술 이름 (예: "React", "Node.js", "TypeScript")
  createdAt   DateTime  @default(now())                   // 생성일시
  projects    Project[]                                   // 이 기술을 사용한 프로젝트들

  @@map("tech_stacks")
}

model ProjectLink {
  id        Int     @id @default(autoincrement()) // 링크 고유 ID
  title     String  @db.VarChar(100)              // 링크 제목 (예: "GitHub", "Demo", "Design")
  url       String  @db.VarChar(2083)             // 링크 URL
  icon      String? @db.VarChar(500)              // 링크 아이콘 URL (선택적)
  projectId Int                                   // 프로젝트 ID
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // 프로젝트

  @@index([projectId])
  @@map("project_links")
}