generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isAdmin     Boolean       @default(false)
  comments    Comment[]
  CommentLike CommentLike[]
  Like        Like[]
  posts       Post[]
}

model Post {
  id            Int       @id @default(autoincrement())
  coverImg      String?
  category      String?
  title         String
  content       String
  tags          String[]
  likes         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  slug          String    @unique
  choseongTitle String
  isPrivate     Boolean   @default(false)
  comments      Comment[]
  Like          Like[]
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  userId String
  postId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Comment {
  id              Int           @id @default(autoincrement())
  content         String
  likes           Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String?
  postId          Int
  parentCommentId Int?
  parentComment   Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[]     @relation("CommentReplies")
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User?         @relation(fields: [userId], references: [id])
  CommentLike     CommentLike[]

  @@index([parentCommentId])
}

model CommentLike {
  userId    String
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String
  summary     String[]
  techStack   String[]
  githubLink  String?   @db.VarChar(2083)
  projectLink String?   @db.VarChar(2083)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPersonal  Boolean   @default(true)
  content     String    @default("")

  @@index([startDate, endDate])
}
