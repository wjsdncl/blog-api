// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password      String   
  isAdmin       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  posts         Post[]
  comments      Comment[] 
}

model Post {
  id            Int      @id @default(autoincrement())
  slug          String   @unique
  coverImg      String?
  category      String?
  title         String
  choseongTitle String?
  content       String?
  tags          String[]
  likes         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  comments  Comment[] 
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  likes           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?   // 댓글 작성자가 탈퇴한 경우를 대비해 Optional로 설정

  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          Int

  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  parentCommentId Int?      // 대댓글인 경우 부모 댓글의 ID
  
  replies         Comment[] @relation("CommentReplies")

  @@index([parentCommentId]) 
}

