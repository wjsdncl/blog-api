// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password      String   
  isAdmin       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  posts         Post[]
  comments      Comment[] 
  Like          Like[]
  CommentLike   CommentLike[]
}

model Post {
  id            Int      @id @default(autoincrement())
  slug          String   @unique
  coverImg      String?
  category      String?
  title         String
  choseongTitle String
  content       String   @db.Text
  tags          String[]
  likes         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  comments  Comment[] 

  Like Like[]
}

model Like {
  userId   String
  postId   Int
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}


model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  likes           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?   // 댓글 작성자가 탈퇴한 경우를 대비해 Optional로 설정

  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          Int

  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  parentCommentId Int?      // 대댓글인 경우 부모 댓글의 ID
  
  replies         Comment[] @relation("CommentReplies")

  @@index([parentCommentId]) 
  CommentLike CommentLike[]
}

model CommentLike {
  userId     String
  commentId  Int
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment    Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}


// Portfolio
model Project {
  id          Int      @id @default(autoincrement())  // 프로젝트 고유 ID (자동 증가)
  title       String                                  // 프로젝트 제목
  isPersonal  Boolean   @default(true)                // 개인 프로젝트 여부
  startDate   DateTime                                // 프로젝트 시작일
  endDate     DateTime?                               // 프로젝트 종료일 (선택적)
  description String                                  // 프로젝트 설명
  content     String   @db.Text                       // 프로젝트 상세 내용
  summary     String[]                                // 프로젝트 요약
  techStack   String[]                                // 사용한 기술 스택
  githubLink  String?  @db.VarChar(2083)              // 깃허브 링크 (선택적)
  projectLink String?  @db.VarChar(2083)              // 프로젝트 링크 (선택적)
  createdAt   DateTime @default(now())                // 프로젝트 생성일
  updatedAt   DateTime @updatedAt                     // 프로젝트 수정일

  @@index([startDate, endDate]) 
}

