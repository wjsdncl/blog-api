27	KokKok	2024-11-21 00:00:00	\N	사진으로 운동 인증하고 달력으로 기록을 확인하며, 친구에게 “콕”으로 운동을 독려하고 쉬는 날을 설정할 수 있는 소셜 운동 앱입니다.	{"KokKok은 운동 습관을 돕는 소셜 운동 앱으로, 사진 인증과 친구들의 운동 독려 기능을 제공한다","사용자가 지인들과 운동 기록을 공유하며 지속적인 운동 습관을 가질 수 있게 돕고, 다양한 탭과 기능을 통해 커뮤니티 소통과 상호작용이 가능하다","개발자는 홈 탭, 댓글창, 운동 인증 탭 등 각 부분의 개발에 집중하였고, 백엔드에는 Supabase를 적용하여 데이터 관리와 성능 최적화를 추구하였다."}	{ReactNative,Expo,Supabse,Typescript,TanstackQuery,Sentry,Jotai,Nativewind}	https://github.com/Epilogue-1/kokkok	\N	2025-04-02 08:22:02.2	2025-04-18 04:46:46.531	f	## 개요\n\n**KokKok**은 사진 인증으로 운동 이력을 관리하고, 운동 기록을 달력으로 한눈에 확인할 수 있는 소셜 운동 앱입니다. 친구들이 서로 운동을 독려할 수 있는 "콕 찌르기" 기능과 쉬는 날 설정 기능을 통해 부담 없이 꾸준히 운동할 수 있도록 설계되었습니다.\n\n## 프로젝트 목표\n\nKokKok은 **지인들 간의 운동 독려**를 위해 시작된 프로젝트로, 사용자들이 가까운 사람들과 함께 운동의 즐거움과 성취감을 공유하며 지속적인 운동 습관을 형성할 수 있도록 돕는 것을 목표로 합니다. 현재 **플레이스토어와 앱스토어 출시**를 준비 중이며, 더 많은 사용자에게 다가갈 수 있는 앱으로 발전시키는 것이 최종 목표입니다.\n\n## 주요 기능\n\n### 홈 탭\n\n- 모든 사용자의 운동 인증 **게시글을 확인**할 수 있습니다.\n- 게시글에 **좋아요**, **댓글**, **답글**을 달 수 있어 사용자 간 소통이 가능합니다.\n- 부적절한 게시글은 **신고** 가능하며, 특정 사용자를 **차단**할 수 있습니다.\n- 게시글에 좋아요나 댓글이 달리면 **실시간 알림**이 제공됩니다.\n\n### 친구 탭\n\n- **친구 목록**과 **받은 친구 요청**을 관리할 수 있습니다.\n- **사용자 검색**을 통해 새로운 친구를 찾아 **친구 요청**을 보낼 수 있습니다.\n- **"콕 찌르기" 기능**: 운동하지 않은 친구에게 운동을 독려하는 알림을 보냅니다.\n\n### 기록 탭\n\n- **운동 기록**을 달력 형태로 시각화하여 확인할 수 있습니다.\n- **운동한 날**, **안 한 날**, **쉬는 날**을 구분하며, 쉬는 날은 사용자가 직접 설정 가능합니다.\n- 쉬는 날에는 친구의 "콕 찌르기"가 차단되어 **부담 없이 운동**할 수 있습니다.\n- 시각화된 기록을 통해 **성취감과 자기 만족감**을 느낄 수 있습니다.\n\n### 마이 탭\n\n- **프로필 이미지**, **닉네임**, **소개글** 등 개인 정보를 수정할 수 있습니다.\n- 내가 작성한 **모든 게시글**을 한눈에 확인 가능합니다.\n\n### 설정 탭\n\n- **알림 설정**, **비밀번호 변경**, **로그아웃**, **계정 탈퇴** 기능을 제공합니다.\n- **개발팀 문의** 기능을 통해 사용자가 직접 피드백을 전달할 수 있습니다.\n\n### 인증하기 탭\n\n- 운동 인증 게시글 작성 시 **이미지 1장 이상 업로드**가 필수이며, 최대 **5장**까지 가능합니다.\n- **본문 작성**은 선택 사항입니다.\n- **드래그 앤 드롭** 방식으로 이미지를 쉽게 추가할 수 있습니다.\n\n## 개발 역할 및 기여도\n\n### 홈 탭 개발\n\n홈 탭은 사용자의 피드 탐색과 상호작용의 중심이 되는 화면으로, 다양한 기능과 복잡한 인터랙션을 포함합니다. \n\n게시글 목록은 TanStack Query를 활용해 무한스크롤 방식으로 구현하였고, 데이터 캐싱과 낙관적 업데이트를 적용하여 사용자 경험의 응답성을 높였습니다. 게시글의 작성자는 수정 및 삭제가 가능하며, 상단의 프로필 영역을 터치하면 해당 사용자의 프로필 페이지로 이동할 수 있도록 라우팅 처리하였습니다.\n\n게시글 내 이미지들은 캐러셀 형태로 구현하였고, 사용자는 드래그를 통해 이미지를 넘길 수 있으며, 하단 인디케이터로 현재 이미지의 순서와 전체 개수를 쉽게 파악할 수 있습니다. \n\n좋아요 기능은 클릭 시 즉시 UI에 반영되도록 낙관적 업데이트를 적용했으며, 좋아요한 사용자 목록도 확인할 수 있도록 하였습니다. 또한, 댓글 미리보기 기능을 통해 가장 많은 좋아요를 받은 댓글을 메인 화면에서 바로 확인할 수 있어 사용자 간 상호작용을 자연스럽게 유도합니다.\n\n### 댓글창 개발\n\n댓글 기능은 커뮤니티 소통의 핵심이기에 UI/UX와 성능 모두를 고려하여 개발하였습니다.\n\n사용자는 게시글에 댓글을 작성할 수 있으며, 각 댓글에는 다시 답글을 남길 수 있습니다. 답글은 기본적으로 숨겨져 있으며, '더보기' 버튼을 클릭하면 펼쳐지는 방식으로 구성하여 인터페이스의 복잡도를 최소화하였습니다.\n\n또한 댓글창은 화면 하단에서 슬라이드업 형태로 등장하며, 상단을 드래그하여 크기를 조절할 수 있어 사용자가 원하는 방식으로 내용을 탐색할 수 있습니다. 댓글 작성자의 이름을 클릭하면 해당 유저의 프로필로 이동할 수 있도록 연결했으며, 댓글 목록도 무한스크롤로 구현하여 쾌적한 탐색이 가능하도록 최적화하였습니다.\n\n### 인증하기 탭 개발\n\n운동 인증 게시글의 품질과 자유도를 높이기 위해 이미지 편집 및 배열 기능에 집중하였습니다.\n\nreact-native-image-crop-picker를 활용하여 사용자가 자유롭게 원하는 비율로 이미지를 자를 수 있도록 구현하였고, 업로드된 이미지는 react-native-draggable-flatlist를 통해 드래그 앤 드롭 방식으로 쉽게 정렬할 수 있도록 하였습니다.\n\n사용자는 최대 5장의 이미지를 업로드할 수 있으며, 이미지 업로드와 배열 과정이 직관적으로 이뤄지도록 UI를 구성하였습니다.\n\n### Supabase 기반 백엔드 구축\n\nSupabase를 기반으로 전체 백엔드 구조를 설계하고 구현하였습니다. 주요 테이블인 post, comment, userBlock, report를 직접 설계하고, 클라이언트와의 데이터 연동을 위한 로직을 구성하였습니다.\n\n성능 최적화를 위해 Supabase의 RPC(Remote Procedure Call)를 도입하여 복잡한 데이터 요청을 단일 호출로 처리할 수 있도록 했으며, 인덱스를 활용해 쿼리 효율을 높였습니다. 예를 들어, 댓글과 답글을 각각 나눠 요청하는 대신, 한 번의 요청으로 인기 댓글과 그 외 댓글을 함께 가져오는 구조를 만들어 성능을 개선했습니다.\n\n### 사용자 신고 및 차단 시스템 구축\n\n커뮤니티의 안전성과 사용자 보호를 위해 신고 및 차단 시스템을 구축하였습니다.\n\n신고 기능은 게시글, 댓글, 사용자 단위로 가능하며, 운영자가 신고 내역을 확인하고 조치를 취할 수 있도록 데이터 흐름을 구성했습니다.\n\n차단 기능은 상호 간의 모든 활동을 제한하는 구조로 개발하였으며, 차단된 사용자와는 게시글, 댓글, 친구 요청, 알림 등의 모든 상호작용이 차단됩니다. 이 기능은 사용자 경험을 해치지 않으면서도 원치 않는 접촉을 막는 데 초점을 두었고, 차단 해제는 운영자 문의를 통해서만 가능합니다.\n\n이러한 구조는 악의적인 사용자로부터의 방어뿐 아니라 커뮤니티 질서 유지를 위한 기반이 되도록 설계되었습니다.\n\n## 기술 스택\n\n- **React Native** & **Expo**: 크로스 플랫폼 모바일 앱 개발.\n- **Supabase**: 백엔드 서비스 및 실시간 데이터베이스 관리.\n- **TypeScript**: 타입 안전성을 통한 코드 품질 향상.\n- **TanStack Query**: 데이터 fetching과 캐싱, 낙관적 업데이트 구현.\n- **Jotai**: 간편한 상태 관리.\n- **Sentry**: 에러 모니터링 및 사용자 경험 개선.\n- **NativeWind (TailwindCSS)**: 빠르고 일관된 UI 스타일링.\n\n## 트러블 슈팅\n\n### 1. 게시글 댓글과 답글 데이터 요청 최적화\n\n**문제 상황**  \n게시글에 댓글과 답글을 가져올 때, 가장 좋아요를 많이 받은 답글만 먼저 가져오고, 더보기 시 나머지 답글을 별도 요청으로 추가로 가져오는 방식으로 클라이언트에서 요청이 2회 발생하여 성능 저하가 있었습니다.\n\n**문제 해결**  \nSupabase의 RPC(Remote Procedure Call)와 인덱스를 활용하여 데이터베이스에서 댓글과 가장 인기 있는 답글을 한 번의 요청으로 처리하도록 최적화했습니다.\n\n**결과**  \n데이터 요청이 단일 요청으로 최적화되어, 성능 개선과 빠른 사용자 경험을 제공할 수 있었습니다.\n\n### 2. 게시글 이미지 자유형 업로드 기능 개선\n\n**문제 상황**  \n기존 이미지 업로드는 정사각형 편집만 지원하여 사용자 편의성이 떨어졌고, 특히 iOS 환경에서 자유형 편집이 불가능했습니다.\n\n**문제 해결**  \n기존의 `expo-image-picker`를 `react-native-image-crop-picker` 라이브러리로 교체하여 자유형 이미지 편집을 지원하도록 구현했습니다. 빈 공간은 블러 처리해 자연스러운 이미지를 제공했습니다. 또한 이미지 세로 비율을 1~1.25 범위로 제한해 세로로 긴 이미지도 시각적으로 명확하게 보이도록 개선했습니다.\n\n**결과**  \n사용자가 원하는 형태로 자유롭게 이미지 편집이 가능해졌고, 특히 긴 이미지 표현력과 사용자 만족도가 향상되었습니다.\n\n	{https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604731-image-1744951602815.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604932-image-1744951602816.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604883-image-1744951602816.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604871-image-1744951602817.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604971-image-1744951602817.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604875-image-1744951602817.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604971-image-1744951602818.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604658-image-1744951602818.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604872-image-1744951602818.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951604971-image-1744951602819.webp}
22	Fortune	2024-04-30 00:00:00	2024-05-17 00:00:00	Fortune은 친구나 지인에게 익명으로 메시지를 보낼 수 있는 플랫폼입니다. 따뜻한 응원이나 속마음을 부담 없이 전할 수 있는 공간을 지향하며, React 기반의 팀 프로젝트로 개발되었습니다.	{"친구에게 익명으로 메시지를 보낼 수 있는 플랫폼인 'Fortune' 프로젝트에서, 나는 포스트 목록 페이지를 개발했다.","이 페이지는 React에서 무한 캐러셀 UI를 부드럽게 구현하고, URL을 통해 검색 결과를 공유하고 유지하는 기능을 담당했다.","우리 팀은 협업과 커뮤니케이션 방식을 개선하고, React를 처음 도입하여 학습하며, 4월 30일부터 5월 17일까지 프로젝트 목표를 달성했다."}	{JS,React,styled-components}	https://github.com/5Team-Project/5teamFrontEnd	https://fortunepapper.vercel.app/	2024-11-20 03:21:50.614	2025-04-18 05:01:42.939	f	## 개요\n\n**Fortune**은 친구나 지인에게 **익명으로 마음을 전할 수 있는 메시지 플랫폼**입니다. 메시지를 받은 사람은 따뜻한 응원을 확인할 수 있고, 보낸 사람은 부담 없이 마음을 표현할 수 있습니다.  \n이 프로젝트는 **React를 처음 도입한 팀 프로젝트**로, 협업과 커뮤니케이션 방식에 대해 다양한 실험과 학습을 진행하였습니다.\n\n## 프로젝트 정보\n\n- **개발 기간**: 2024년 4월 30일 ~ 2024년 5월 17일  \n- **팀 구성**: 프론트엔드 개발자 5명  \n- **담당 역할**: 포스트 목록 페이지 개발\n\n## 프로젝트 목표\n\nFortune의 목표는 **사람들이 익명으로 진심을 전할 수 있는 공간**을 만드는 것입니다. 단순한 메시지 전달을 넘어, 일상 속 작은 응원이 긍정적인 영향을 줄 수 있도록 기획하였습니다.  \n또한 이 프로젝트는 **React 기반 협업 개발 경험을 쌓고**, 팀원 간의 원활한 협업 방식과 문제 해결 능력을 함께 키우는 것을 학습 목표로 삼았습니다.\n\n## 주요 기능\n\n### 메시지 작성 및 전달\n\n- 익명으로 메시지를 작성하고 전송할 수 있습니다.  \n- 수신자는 링크를 통해 메시지를 확인할 수 있으며, 발신자의 정보는 알 수 없습니다.  \n- 전송된 메시지는 저장되어 언제든 다시 확인할 수 있습니다.\n\n### 메시지 수신 및 공유\n\n- 사용자는 개인 메시지 수신 링크를 생성하여 친구나 지인에게 공유할 수 있습니다.  \n- 공유된 링크를 통해 누구나 메시지를 남길 수 있으며, 수신자는 익명으로 응원을 받아볼 수 있습니다.  \n- 메시지는 카드 형태로 구성되어 있으며, 읽는 이에게 따뜻한 인상을 주는 감성적인 UI로 설계되었습니다.\n\n### 메시지 카드 UI 및 사용자 경험\n\n- **무한 캐러셀 UI**를 적용하여 사용자가 메시지를 **끊김 없이 자연스럽게 탐색**할 수 있도록 구현하였습니다.  \n- 부드러운 전환 효과와 반복 가능한 구조를 통해 읽기 흐름을 방해하지 않고 몰입감을 유지할 수 있도록 UX를 고려하였습니다.  \n- **검색 기능은 URL 쿼리 파라미터와 연동**되어 있어 검색 결과를 공유하거나 새로고침해도 그대로 유지되며, **브라우저의 뒤로/앞으로 가기 기능도 지원**하여 사용성이 향상되었습니다.\n\n## 개발 역할 및 기여도\n\n### 포스트 목록 페이지 제작\n\n- **무한 캐러셀 구현**: React에서 `key` 충돌 없이 부드럽게 동작하는 무한 캐러셀 구조를 설계하고 구현하였습니다. 배열 재배치 로직을 통해 반복 요소의 렌더링 문제를 해결하고, 사용자에게 끊김 없는 UI 경험을 제공하였습니다.\n\n- **URL 기반 검색 기능 개발**: 검색어를 URL 쿼리 파라미터로 반영하여, 검색 결과를 공유하거나 새로고침 후에도 동일한 상태가 유지되도록 구현하였습니다. 이를 통해 브라우저 내비게이션과의 호환성을 높이고 사용자 편의성을 개선하였습니다.\n\n## 팀 소통\n\n- **Slack**을 중심으로 팀 내 실시간 소통 체계를 구축하였습니다.  \n- **GitHub 알림을 Slack과 연동**하여 PR, 이슈 등의 변경 사항을 빠르게 공유하고 신속하게 대응할 수 있도록 구성하였습니다.  \n- 매일 **13시부터 22시까지**를 팀 응답 대기 시간으로 정하여 피드백 속도를 높이고, 작업 진행을 원활하게 유지하였습니다.\n\n## 기술 스택\n\n- **React**: 컴포넌트 기반 UI 구성  \n- **JavaScript**: 전체 기능 로직 구현  \n- **React Router**: 페이지 전환 및 URL 기반 상태 관리  \n- **GitHub + Slack**: 협업 및 코드 리뷰 알림 연동\n\n## 트러블슈팅\n\n### 1. 무한 캐러셀 구현 중 `key` 충돌 문제\n\n**문제 상황**  \n무한 캐러셀을 구현할 때, 배열의 마지막 요소를 앞뒤로 복제하여 연속 스크롤을 구성하였으나, React에서 **동일한 `key` 값을 가진 요소들이 중복 렌더링되며 경고 메시지가 발생**하고 UI가 비정상적으로 동작하는 문제가 있었습니다.\n\n특히 카드 요소들이 반복적으로 재사용되는 구조에서 동일한 인덱스의 요소가 여러 위치에 등장하면서 렌더링 충돌이 발생하였습니다.\n\n**문제 해결**  \n캐러셀 인덱스가 특정 구간(처음이나 끝)에 도달할 경우, 요소를 **앞이나 뒤로 재배치하는 로직**을 추가하여 DOM에 동일한 `key`가 겹치지 않도록 조정하였습니다.  \n- 시작 인덱스에 가까워지면 배열의 끝쪽 데이터를 앞에 삽입  \n- 끝 인덱스에 가까워지면 배열의 앞쪽 데이터를 뒤로 복제\n\n이 방식을 통해 `key` 충돌을 방지하면서도 자연스러운 무한 캐러셀 흐름을 유지할 수 있었습니다.\n\n**결과**  \n- React의 `key` 충돌 경고가 사라졌고, 전체 캐러셀이 부드럽게 작동하였습니다.  \n- 사용자는 **끊김 없는 캐러셀 효과**를 경험할 수 있었으며, 성능 저하 없이 안정적인 UI를 구현할 수 있었습니다.\n\n### 2. 검색 결과 초기화 및 공유 불가 문제\n\n**문제 상황**  \n기존 검색 기능은 검색어를 컴포넌트 상태(state)로만 관리하여, **페이지를 새로고침하거나 다른 사람에게 URL을 공유할 경우 검색 결과가 초기화되는 문제**가 있었습니다. 또한, 브라우저의 뒤로/앞으로 가기 기능을 사용해도 이전 검색 결과로 돌아갈 수 없었습니다.\n\n**문제 해결**  \n검색어를 **URL 쿼리 파라미터에 반영**하여 상태가 주소에 포함되도록 개선하였습니다.  \n- 검색 시 입력값을 `?name=검색어` 형식으로 URL에 추가  \n- 컴포넌트 마운트 시 URL에서 검색어를 읽어 자동 검색 실행  \n- 브라우저의 내비게이션 및 새로고침 상황에도 검색 결과가 유지되도록 구성\n\n**결과**  \n- 사용자는 **URL만 복사해도 검색 결과를 공유**할 수 있게 되었고, 새로고침 시에도 상태가 유지되었습니다.  \n- 브라우저의 **뒤로/앞으로 가기 기능**을 통해 검색 이력을 자연스럽게 탐색할 수 있게 되어, UX가 크게 향상되었습니다.  \n- 전반적으로 검색 기능의 **공유성, 유지력, 내비게이션 편의성**이 모두 개선되었습니다.	{https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951746107-image-1744951744037.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951746272-image-1744951744038.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951745924-image-1744951744038.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951746271-image-1744951744038.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951745898-image-1744951744039.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744951746173-image-1744951744039.webp}
25	Checkmate	2024-07-25 00:00:00	2024-08-30 00:00:00	Checkmate는 업무를 세분화하고 목표 달성도를 시각화해 팀이 함께 성장할 수 있도록 돕는 투두리스트 기반 협업 툴입니다.	{"체크메이트는 팀 협업을 위한 작업 관리 서비스로, 할 일 세분화와 시각화, 초대 기능 등이 특징이다.","Next.js의 SSR과 React Query의 캐싱을 활용하여 협업 도구로 개발되었으며, 공통 컴포넌트 설계와 시각적 UI로 사용자의 편의성을 높였다.","개발자는 프로젝트 기간 동안 소셜 로그인, 비밀번호 재설정 기능 등을 담당했으며, 서버 캐싱 문제 해결을 위해 React Query를 수정했다."}	{TypeScript,Next.js,Zustand,"TanStack Query",TailwindCSS,"MongoDB Atlas"}	https://github.com/part4-team5/checkmate	https://checkmate-645.vercel.app/	2024-11-28 06:41:56.295	2025-04-16 11:57:04.304	f	## 개요\n\n**Checkmate**는 팀 협업을 위한 **투두리스트 기반 작업 관리 서비스**입니다.  \n할 일을 세분화하고, 목표 달성률과 진행 상황을 시각적으로 확인할 수 있어 팀의 생산성과 협업 효율을 높이는 데 초점을 맞췄습니다.  \n초대 기능, 반복 일정, 히스토리 등 실제 협업 시 필요한 기능들을 직관적이고 간결한 UI로 제공합니다.\n\n## 프로젝트 정보\n\n- **개발 기간**: 2024년 7월 25일 ~ 2024년 8월 30일  \n- **팀 구성**: 프론트엔드 개발자 5명  \n- **담당 역할**:  \n  - 소셜 로그인  \n  - 비밀번호 재설정  \n  - 버튼/헤더 등 공통 컴포넌트 개발  \n  - 랜딩 페이지  \n  - 내 대시보드 페이지\n\n## 프로젝트 목표\n\nCheckmate는 팀 프로젝트를 통해 다음의 기술적 목표를 달성하고자 기획되었습니다:\n\n- **Next.js의 SSR(Server Side Rendering)**을 활용하여 초기 데이터 로딩 최적화  \n- **React Query의 캐싱 기능**으로 서버 상태를 효율적으로 관리  \n- 유지보수성과 일관성을 고려한 **공통 컴포넌트 설계 및 적용**  \n- 협업 중심의 사용자 경험(UX)을 구현하는 실용적인 작업 도구 개발\n\n## 주요 기능\n\n### 랜딩 페이지\n\n- 서비스 소개 및 주요 기능을 사용자에게 **직관적으로 전달**하는 메인 진입 페이지입니다.  \n- 핵심 정보를 강조하는 **UI 레이아웃**과, 할 일 완료 상태를 보여주는 **시각적 애니메이션**을 포함하고 있습니다.\n\n### 내 대시보드 페이지\n\n- 사용자가 **참여 중인 팀 목록**과 **초대받은 팀 목록**을 한눈에 확인할 수 있습니다.  \n- 새로운 팀을 **직접 생성할 수 있는 기능**이 포함되어 있어 협업 환경을 능동적으로 확장할 수 있습니다.\n\n### 팀 상세 페이지\n\n- 팀의 전체 할 일 진행률을 시각화하여 **업무 상태를 명확히 파악**할 수 있습니다.  \n- 오늘의 할 일과 완료된 할 일 수치를 제공하고, 팀 구성원을 확인할 수 있습니다.  \n- 새로운 할 일 목록을 추가하거나, 팀원을 **이메일 초대 및 초대 링크** 방식으로 팀에 초대할 수 있습니다.\n\n### 할 일 목록 페이지\n\n- 사용자의 오늘 할 일과 다른 날짜의 할 일을 확인할 수 있으며, **새로운 할 일을 직접 추가**할 수 있습니다.  \n- 할 일 생성 시, 제목, 시작일, 반복 주기(한 번 / 매일 / 매주 / 매월), 메모 등을 설정할 수 있습니다.  \n- 할 일을 클릭하면 **슬라이드 형태로 상세 보기**가 나타나며, **댓글 기능**을 통해 팀원 간 피드백도 가능합니다.\n\n### 마이 히스토리 페이지\n\n- 사용자가 완료한 할 일들을 **날짜별로 기록**하여 확인할 수 있습니다.  \n- 나의 작업 이력을 시각적으로 되돌아볼 수 있어 **자기 관리에 도움**을 줍니다.\n\n### 계정 설정 페이지\n\n- 프로필 이미지와 닉네임을 변경할 수 있으며, **비밀번호 변경 페이지로 이동**할 수 있습니다.  \n- 계정 탈퇴 기능도 포함되어 있어 사용자가 직접 계정을 관리할 수 있습니다.\n\n### 자유게시판 페이지\n\n- 사용자가 **자유롭게 게시글을 작성하고 소통할 수 있는 공간**입니다.  \n- **마크다운(Markdown)을 지원**하여 글을 풍부하게 구성할 수 있으며,  \n- **이미지 업로드 기능**도 함께 제공되어 시각적인 게시글 작성이 가능합니다.\n\n## 개발 역할 및 기여도\n\n### 공통 컴포넌트 설계\n\n- 프로젝트 전체에 걸쳐 재사용 가능한 **버튼, 헤더 등 UI 컴포넌트**를 설계하고 구축하였습니다.  \n- 디자인 시스템 기반으로 **일관된 스타일과 인터랙션을 유지**하도록 구성하였습니다.\n\n### 인증 기능\n\n- **Google 소셜 로그인 기능**을 NextAuth 기반으로 구현하여 간편 로그인 경험을 제공하였습니다.  \n- **비밀번호 재설정 기능**은 토큰 기반 인증 방식을 통해 이메일 링크 클릭 후 새로운 비밀번호를 등록할 수 있도록 구현하였습니다.\n\n### 랜딩 페이지\n\n- 메인 진입 페이지 UI를 구성하고, 애니메이션 효과를 적용하여 사용자의 시선을 끌 수 있도록 설계하였습니다.  \n- 시각적 상호작용을 통해 서비스 목적과 기능을 간결하게 전달하도록 구성하였습니다.\n\n![랜딩 페이지](https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/Screenshot%202024-12-30%20at%2020.26.58.gif)\n\n### 내 대시보드 페이지\n\n- 팀을 **드롭다운이 아닌 리스트 형태로 시각화**하여 접근성을 높였으며, 초대받은 팀 목록을 함께 표시하여 효율적인 팀 관리를 가능하게 하였습니다.  \n- SSR을 통해 초기 로딩 시 데이터를 서버에서 불러오고, React Query로 초대 수락 이후 데이터를 자동 무효화 처리하여 실시간 상태 반영을 구현했습니다.\n\n![내 대시보드 페이지](https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1735559134215-image.webp)\n\n### 초대 기능 개선\n\n- **이메일 초대**: 대상 이메일을 직접 입력해 초대할 수 있도록 구현하였습니다.  \n- **초대 링크 생성**: 사용자가 생성한 링크를 공유하면 상대방이 클릭만으로 팀 초대를 받을 수 있도록 구성하였습니다.  \n- 초대장은 사용자의 대시보드에 자동으로 표시되며, 수락/거절할 수 있도록 UX를 개선했습니다.\n\n| 멤버 초대 | 초대장 |\n|:-----------:|:----------:|\n| ![invite](https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1735559429822-image.webp) | ![invite_user](https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1735559136340-image.webp) |\n\n## 트러블슈팅\n\n### 1. 서버 캐싱으로 인한 데이터 무효화 문제\n\n**문제 상황**  \nNext.js App Router 환경에서 SSR을 사용하는 경우, React Query의 무효화 기능이 서버 캐싱에 가로막혀 최신 데이터를 가져오지 못하는 문제가 발생하였습니다.\n\n**해결 방법**  \n- React Query의 `prefetchQuery`를 SSR 단계에서 적용하여 **클라이언트가 초기 상태로 신선한 데이터를 보유**하도록 처리하였습니다.  \n- React Query의 **클라이언트 캐싱 시스템**을 신뢰할 수 있도록 설정하고, 서버 캐시 의존을 제거했습니다.\n\n**결과**  \n- 데이터 무효화 시 즉시 최신 데이터가 반영되며, SSR과 클라이언트 캐싱이 자연스럽게 연동된 구조로 성능과 신뢰도를 동시에 확보하였습니다.	{https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619276-image-1744804612763.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619279-image-1744804612763.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619200-image-1744804612764.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619371-image-1744804612764.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619030-image-1744804612764.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619471-image-1744804612765.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619381-image-1744804612765.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619372-image-1744804612765.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619778-image-1744804612766.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744804619472-image-1744804612766.webp}
26	개발 블로그	2024-09-17 00:00:00	2024-10-11 00:00:00	개발 블로그에 블로그 기능과 포트폴리오를 추가한 웹사이트입니다. 백엔드 기술을 학습해 서버를 직접 배포했으며, 마크다운을 활용해 게시글을 작성할 수 있도록 구현했습니다.	{"개발 블로그 웹사이트는 Next.js의 서버 컴포넌트와 SSR을 활용하여 정적 콘텐츠를 효과적으로 관리하며, TanStack Query 기반의 클라이언트 캐싱으로 사용자 경험과 성능을 고려하였다.","마크다운 기반의 글 작성, 포트폴리오 관리, AI 요약, 검색, 이미지 업로드 등 개인 기록에 유용한 기능을 갖췄고, 서버와 클라이언트 캐싱 전략을 조합하여 페이지별 최적화도 이뤄냈다.","트러블슈팅에서는 초성 검색과 SSR 환경에서의 쿠키 인증 문제를 해결하여 성능과 기능을 개선했다."}	{TS,React,Next.js,React-query,Zustand,Prisma,ExpressJs,PostgreSQL,Supabase}	https://github.com/wjsdncl/next_blog	https://www.wjdalswo-dev.xyz/	2025-01-02 08:04:22.051	2025-04-18 05:02:21.226	t	## 개요\n\n**개발 블로그**는 **기술 블로그 작성**, **포트폴리오 관리**, **AI 요약**, **검색**, **이미지 업로드** 기능을 포함한 개인 기록용 웹사이트입니다.  \n정적 콘텐츠가 많은 블로그 특성에 맞춰 **Next.js의 서버 컴포넌트**, **SSR(서버사이드 렌더링)**을 활용하였고,  \n**TanStack Query 기반 클라이언트 캐싱**을 통해 사용자 경험과 성능을 함께 고려하였습니다.\n\n## 프로젝트 정보\n\n- **개발 기간**: 2024년 9월 17일 ~ 2024년 10월 11일  \n- **개발 인원**: 1인 (프론트엔드 + 백엔드)\n\n## 기술 스택\n\n- **Frontend**: `Next.js`, `React`, `TypeScript`, `Tailwind CSS`, `Zustand`  \n- **Backend**: `Express`, `Prisma`, `PostgreSQL`, `Supabase`  \n- **Etc**: `React Markdown`, `Remark GFM`, `Cohere API`, `Render`\n\n## 주요 기능\n\n### 홈페이지\n\n**최신 게시글과 인기 게시글**을 구분하여 보여주며, 각 게시글은 상세 페이지로 이동할 수 있습니다.  \n초기 렌더링은 **서버 캐싱**만 사용하여, **SEO에 유리하고 빠른 초기 응답**을 제공합니다.  \n상호작용 기능은 별도로 없기 때문에 **클라이언트 캐싱은 사용하지 않습니다.**\n\n### 블로그 목록 페이지\n\n전체 **블로그 게시글 목록**을 확인할 수 있는 페이지입니다.  \n해당 페이지는 **서버 캐싱과 클라이언트 캐싱을 함께 사용**합니다.  \n**서버 캐싱**은 초기 페이지 로딩 속도 개선 및 SEO 대응을 위해 사용되고,  \n이후 페이지네이션, 검색, 필터링 등 **동적 데이터는 클라이언트에서 TanStack Query를 통해 불러옵니다.**\n\n### 블로그 상세 페이지\n\n**블로그 글의 내용과 댓글을 확인할 수 있는 상세 페이지**입니다.  \nURL은 제목 기반으로 구성되어 **공유가 쉽고 직관적**입니다.  \n**서버 캐싱**은 SEO 및 초기 렌더링 성능 향상을 위해,  \n**클라이언트 캐싱**은 좋아요, 댓글 등 상호작용 데이터를 위한 실시간 갱신 용도로 함께 사용됩니다.  \n댓글 및 대댓글 기능은 로그인한 사용자만 이용할 수 있습니다.\n\n### 블로그 글 작성 페이지\n\n**마크다운 기반의 글 작성 및 수정 페이지**입니다.  \n좌측에는 마크다운 입력, 우측에는 실시간 렌더링 미리보기를 제공합니다.  \n**카테고리, 제목, 태그, 본문, 이미지**를 입력할 수 있으며,  \n본문에 포함된 첫 번째 이미지는 **대표 이미지로 자동 설정**됩니다.\n\n### 포트폴리오 페이지\n\n**진행한 프로젝트들을 카드 형태로 보여주는 포트폴리오 목록 페이지**입니다.  \n**서버 캐싱**으로 초기 데이터를 빠르게 렌더링하고,  \n**클라이언트 캐싱**으로 추가 포트폴리오 탐색 시 효율적인 데이터 로딩을 지원합니다.  \n각 포트폴리오는 GitHub 링크, 배포 링크, AI 요약과 함께 ‘자세히 보기’로 상세 페이지로 이동할 수 있습니다.\n\n### 포트폴리오 작성 페이지\n\n**포트폴리오 등록 및 수정 기능을 제공하는 페이지**입니다.  \n**제목, 설명, 태그, GitHub 링크, 포트폴리오 링크, 마크다운 내용, 이미지**를 입력할 수 있습니다.  \n작성 시 **Cohere API를 통해 AI가 요약한 내용 3줄이 자동 생성**되어 DB에 저장되며,  \n상세 페이지에서는 이미지 캐러셀과 마크다운을 통해 내용을 시각적으로 확인할 수 있습니다.\n\n## 주요 개발 내용\n\n### 마크다운 기반 글 작성 에디터\n\n- `react-markdown`, `remark-gfm`을 사용해 **마크다운 실시간 렌더링**을 지원하였습니다.  \n- 좌측은 입력, 우측은 미리보기 영역으로 구성해 **작성이 직관적**입니다.  \n- 이미지는 **복사/붙여넣기** 또는 **드래그 앤 드롭** 방식으로 업로드할 수 있으며, **Supabase 스토리지**에 저장되고 **자동 삽입**됩니다.  \n- **본문 첫 이미지**를 자동으로 **대표 이미지**로 설정하였습니다.\n\n### 블로그 상세 페이지 기능\n\n- 주소를 `/blog/:title` 형식으로 구성하여 **링크 공유가 자연스럽고 가독성이 높음**  \n- 좌측에는 **좋아요/공유 버튼**, 우측에는 **목차**, 상단에는 **게시글 정보**가 포함됩니다.  \n- **SSR로 초기 렌더링**되며, 이후 **클라이언트 캐싱으로 좋아요/댓글 동기화**  \n- **댓글/대댓글 기능**은 **로그인 사용자만 이용 가능**\n\n### 포트폴리오 등록 및 AI 요약\n\n- 포트폴리오 등록 시 **서버 액션에서 Cohere API**를 사용하여 **설명 요약 3줄 생성**  \n- 생성된 요약 문장은 **DB에 저장**되며, 카드 컴포넌트 상단에 표시됩니다.  \n- 포트폴리오 상세 페이지는 **마크다운 렌더링**과 **이미지 캐러셀**을 통해 구성됩니다.\n\n### 클라이언트 캐싱 전략\n\n- 전체 페이지에서 **TanStack Query 기반의 클라이언트 캐싱**을 사용하였습니다.  \n- `/`, `/blog`, `/portfolio`, `/blog/:title` 등 모든 페이지는 **초기 데이터를 SSR로 로드**한 뒤,  \n  이후 상태 관리는 **클라이언트에서 캐싱 및 무효화 처리**를 통해 유지합니다.\n\n### 검색 기능\n\n- 검색은 **서버에서 실행**, **클라이언트에서 캐싱 및 상태 관리**  \n- `es-hangul`을 활용한 **초성 검색 기능** 제공\n\n## 트러블슈팅\n\n### 초성 검색 기능 성능 문제\n- **문제 상황**  \n  클라이언트에서 검색 시, 서버는 모든 게시글 제목을 `es-hangul`로 **초성 변환**한 뒤 검색어와 비교하는 구조였습니다.  \n  게시글 수가 많아질수록 **검색 성능이 저하**되고 **서버 부하**가 발생하였습니다.\n\n- **문제 해결**  \n  게시글 생성 시 **제목의 초성을 미리 계산하여 DB에 저장**하도록 구조를 변경하였습니다.  \n  이후 검색 시에는 **초성 필드만 비교**하여 결과를 조회하도록 수정하였습니다.\n\n- **결과**  \n  검색 속도가 **안정적이고 빠르게 개선**되었으며, 대용량 게시글 환경에서도 **성능 저하 없이 작동**하게 되었습니다.\n\n### SSR 환경에서의 쿠키 인증 문제\n- **문제 상황**  \n  `fetch`를 사용할 때, 클라이언트에서는 **쿠키가 정상적으로 포함된 요청이 전송**되었지만,  \n  **서버 컴포넌트 내에서 fetch 요청 시 쿠키가 누락되어 인증이 실패**하고 SSR이 제대로 동작하지 않았습니다.\n\n- **문제 해결**  \n  `fetch` 요청을 **서버용과 클라이언트용으로 분리**하였습니다.  \n  서버 컴포넌트에서의 요청에는 **`cookies().get()`을 이용해 쿠키를 직접 읽어**  \n  요청 헤더에 수동으로 포함시키는 구조로 수정하였습니다.\n\n- **결과**  \n  SSR 환경에서도 **정상적으로 인증 정보가 전달**되었고, **클라이언트 캐싱 기반의 상태 관리**가 안정적으로 유지되었습니다.\n	{https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744894610882-image-1744894610152.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744894611071-image-1744894610153.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744894610904-image-1744894610153.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744894610832-image-1744894610154.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744894611471-image-1744894610154.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744894611173-image-1744894610155.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744894610971-image-1744894610155.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744894655719-image-1744894654822.webp}
23	Taskify	2024-06-22 00:00:00	2024-07-09 00:00:00	Taskify는 칸반 보드를 활용하여 개인 및 팀이 효율적으로 일정과 작업을 관리할 수 있는 서비스입니다.	{"Taskify는 칸반 보드를 사용하여 개인과 팀이 작업을 시각적으로 정리하고 관리할 수 있게 해주는 협업 도구이다.","이 프로젝트의 목표는 Next.js 프레임워크에 대한 지식을 늘리고, 협업 프로세스를 경험하는 것이며, 개발자는 사이드바와 내 대시보드 페이지를 개발했다.","사용자는 대시보드와 계정 페이지에 빠르고 쉽게 접근할 수 있으며, 즐겨찾기 기능을 통해 자주 사용하는 대시보드를 편리하게 확인할 수 있다."}	{TypeScript,Next.js,"Redux Toolkit","TanStack Query","React Hook Form",Tailwind}	https://github.com/Part3-Team15/taskify	https://taskify-15.vercel.app/	2024-11-22 08:04:39.306	2025-04-16 09:19:17.22	f	## 개요\n\n**Taskify**는 칸반 보드를 활용해 개인 및 팀이 **작업을 시각적으로 정리하고 효율적으로 관리할 수 있는 협업 도구**입니다.  \n할 일의 상태를 드래그 앤 드롭 방식으로 직관적으로 조작할 수 있으며, 사용자 간 역할 분담과 업무 흐름을 명확하게 파악할 수 있도록 설계되어 있습니다.  \n즐겨찾기, 초대, 대시보드 생성 등 실제 협업 환경에서 필요한 기능을 중심으로 구현되었습니다.\n\n## 프로젝트 정보\n\n- **개발 기간**: 2024년 6월 22일 ~ 2024년 7월 9일  \n- **팀 구성**: 프론트엔드 개발자 4인  \n- **담당 역할**: 사이드바 및 내 대시보드 페이지 개발\n\n## 프로젝트 목표\n\n이 프로젝트는 팀원 간 협업을 통해 **Next.js 프레임워크에 익숙해지고**, 실무에 가까운 구조와 개발 방식을 경험하는 것을 목표로 진행되었습니다.  \n기술 학습뿐 아니라 GitHub를 통한 협업, 역할 분담, 코드 리뷰 등 **협업 프로세스를 체계적으로 경험**하는 데 중점을 두었습니다.\n\n## 주요 기능\n\n### 내 대시보드 페이지\n\n- 사용자가 참여 중인 **모든 대시보드와 초대받은 대시보드를 확인**할 수 있습니다.  \n- 새로운 대시보드를 **직접 생성할 수 있는 기능**이 포함되어 있어, 협업 공간을 자유롭게 확장할 수 있습니다.\n\n### 사이드바\n\n- 사용자가 참여 중인 **모든 대시보드를 빠르게 탐색**할 수 있도록 구성된 고정 메뉴입니다.  \n- **즐겨찾기된 대시보드만 따로 모아볼 수 있는 기능**이 제공되어 자주 사용하는 대시보드에 빠르게 접근할 수 있습니다.  \n- **내 대시보드 페이지**, **내 계정 페이지**로 빠르게 이동할 수 있으며, 새로운 대시보드도 이곳에서 생성할 수 있습니다.\n\n### 대시보드 상세 페이지\n\n- **칸반 보드 형식으로 구성**되어 있어 팀원들과 할 일을 시각적으로 나누어 협업할 수 있습니다.  \n- 할 일(Task)은 **제목, 내용, 태그, 이미지, 마감일, 담당자** 정보를 포함하고 있으며,  \n  **드래그 앤 드롭 방식으로 위치 이동이 가능**하여 업무 상태를 직관적으로 관리할 수 있습니다.\n\n### 대시보드 설정 페이지\n\n- 대시보드의 **공유 및 즐겨찾기 설정**이 가능하며,  \n  **현재 구성원 목록을 확인하고 초대된 사용자 정보도 열람할 수 있습니다.**  \n- 대시보드의 생성자는 **구성원을 강제로 탈퇴시킬 수 있는 권한**을 가집니다.  \n- 초대는 **이메일을 통해 발송**되며, 초대한 사용자 기록도 함께 확인할 수 있습니다.\n\n### 내 계정 페이지\n\n- 사용자 본인의 **프로필 이미지, 닉네임, 비밀번호를 변경**할 수 있는 페이지입니다.  \n- 개인화된 계정 설정이 가능하도록 구성하여 사용자 편의성을 높였습니다.\n\n## 개발 역할 및 기여도\n\n### 사이드바 및 내 대시보드 페이지 개발\n\n**사이드바**\n- 사용자가 내 대시보드, 계정 페이지에 빠르게 접근할 수 있도록 구성하였고,  \n  참여 중인 대시보드를 **페이지네이션을 통해 탐색**할 수 있도록 구현하였습니다.  \n- **즐겨찾기 기능**을 통해 자주 사용하는 대시보드를 사이드바 상단에 고정하여 접근성을 개선하였습니다.\n\n**내 대시보드 페이지**\n- 참여 중인 모든 대시보드와 초대받은 대시보드를 구분하여 보여주는 구조로 구현하였습니다.  \n- **SSR**을 통해 초기 로딩 시 대시보드 및 초대 목록을 빠르게 렌더링하였고,  \n  초대 목록은 **React Query를 이용해 5초 간격으로 자동 갱신**되도록 설계하였습니다.  \n- 초대 수락 시에는 React Query의 invalidate 기능을 적용하여, 수락 즉시 대시보드 목록이 반영되도록 구성했습니다.  \n- **중복 초대 방지 로직**을 통해 동일한 대시보드에 대한 중복 초대는 한 번의 처리로 모두 제거되도록 처리했습니다.\n\n| 내 대시보드 페이지 | 사이드바 즐겨찾기 |\n|:------------------:|:------------------:|\n| ![landing {500x0}](https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1735721843047-image.webp) | ![favorite {350x0}](https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1735722082762-Screenshot%202025-01-01%20at%2018.01.04.webp) |\n\n## 트러블슈팅\n\n### 1. 대시보드 접근성 문제\n\n**문제 상황**  \n기존 API로는 대시보드의 순서를 변경하거나 고정할 수 없었기 때문에, 사용자가 자주 사용하는 대시보드에 접근하기 위해 페이지를 여러 번 넘겨야 했습니다.  \n대시보드 수가 많아질수록 이 불편함은 더욱 커졌고, 작업 흐름을 방해하는 요인이 되었습니다.\n\n**문제 해결**  \n해결 방안으로 **즐겨찾기 기능을 자체적으로 구현**하기로 했습니다.  \n기존 API에서는 해당 기능을 제공하지 않아, **MongoDB를 별도로 활용하여 사용자별 즐겨찾기 데이터를 관리**하도록 설계하였습니다.\n\n- 사용자 ID를 기반으로 MongoDB에 즐겨찾기 목록을 저장하고 불러오는 방식으로 구성  \n- Next.js의 API Routes를 이용해 즐겨찾기 추가/삭제 요청을 처리  \n- 즐겨찾기한 대시보드는 사이드바 상단에 고정하여 빠른 접근이 가능하도록 UI를 구성  \n- UI 측면에서는 **최대 3개까지 즐겨찾기를 등록할 수 있도록 제한**을 두어 가독성과 기능 효율을 함께 고려하였습니다\n\n**결과**  \n사용자는 **자주 사용하는 대시보드를 즐겨찾기하여 보다 빠르게 접근**할 수 있게 되었고,  \n전체 페이지 탐색 시간이 줄어들면서 **사용자 경험과 작업 효율이 크게 개선되었습니다**.\n	{https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153626-image-1744795147802.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153979-image-1744795147803.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153978-image-1744795147803.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153632-image-1744795147804.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153772-image-1744795147805.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153640-image-1744795147805.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153872-image-1744795147806.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153772-image-1744795147806.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153671-image-1744795147807.webp,https://zrkselfyyqkkqcmxhjlt.supabase.co/storage/v1/object/public/images/1744795153672-image-1744795147808.webp}
\.


